##########
Linux Tips
##########

*****************************
Samba Sharing - Linux Mint 20
*****************************

By `Lorna Chepkoech - September 2, 2020 <https://techviewleo.com/install-and-configure-samba-file-sharing-on-linux-mint/>`_ 

In this guide, we are going to show Linux users how to install and configure Samba for sharing files on Linux Mint 20. Samba is an open-source implementation of the Server Message Block (SMB) and Common Internet File System (CIFS) protocols that provides file and print services between clients across various operating systems. Samba makes it possible to share files between Linux and Windows operating systems. In our case here, Linux Mint 20 will be Samba server.


Step 1: Install Samba
=====================

We start by installing required samba packages on Linux Mint 20. This is done using apt command line package manager::

	sudo apt-get -y update
	sudo apt-get -y install samba


Step 2: Configure Samba share
=============================

Samba configuration file is located in /etc/samba/smb.conf. Any changes made to this file requires Samba daemon to be restarted. Let’s start by creating a directory to be shared with Samba. The directory must exist before it can be configured in smb.conf. Let’s create one under /home and allow it to be readable and writable by all users::

	$ sudo mkdir -p /home/share
	$ sudo chmod 777 /home/share

Now open Samba configuration file to make the necessary changes::

	$ sudo vim /etc/samba/smb.conf

Ensure you have the content as shown under global settings::

	[global] 

	# Configure correct UTP 
	 unix charset = UTF-8 
	# Change this to the workgroup/NT-domain name your Samba server will be part of 
	  workgroup = WORKGROUP 
	  server min protocol = NT1
	  ntlm auth = yes
	  #interfaces = 127.0.0.0/8 eth0 
	  bind interfaces only = yes 

Set share configuration at the end::

	[Docs] 
	  path = /home/share 
	  writable = yes 
	  guest ok = yes 
	  guest only = yes 
	  create mode = 0777 
	  directory mode = 0777

Configuration details:

	* Docs – Samba share name
	* path = /home/share – Directory to share
	* guest ok = yes – Turn on guest share
	* guest only = yes – All protected as guests
	* writable = yes – Set share directory as writable
	* create mode = 0777 & directory mode = 0777 – Allow access to all


Step 3: Configure Secure Samba Share
====================================

Give group ownership to Samba shared directory to sambashare group::

	$ sudo chgrp sambashare /home/share

Create samba share user, replacing user1 with your user name::

	$ sudo useradd -M -d /home/share/user1 -s /usr/sbin/nologin -G sambashare user1
	$ sudo mkdir /home/share/user1
	$ sudo chown user1:sambashare /home/share/user1
	$ sudo chmod 2770 /home/share/user1
	$ sudo smbpasswd -a user1
	$ sudo smbpasswd -e user1

We created a user’s home directory inside Samba share parent directory and set ownership to the samba share group. To create another user::

	$ sudo useradd -M -d /home/share/smbadmin -s /usr/sbin/nologin -G sambashare smbadmin
	$ sudo mkdir /home/share/smbadmin
	$ sudo smbpasswd -a smbadmin
	$ sudo smbpasswd -e smbadmin
	$ sudo chown smbadmin:sambashare /home/share/smbadmin
	$ sudo chmod 2770 /home/share/smbadmin

**Configure secure sambashare**

Open samba configuration file and add the following contents::

	$ sudo vim /etc/samba/smb.conf

Add the following content at the end of the file::

	[user1]
	path = /home/share/user1
	readonly = no
	Browseable = no
	force create mode = 0660
	force directory mode = 2770
	valid user = @user1 @sambashare
	[smbadmin]
	path = /home/share/smbadmin
	readonly = no
	Browseable = no
	force create mode = 0660
	force directory mode = 2770
	valid user = @smbadmin @sambashare

Save the file and restart Samba daemon::

	$ sudo systemctl restart smbd nmbd

Allow Samba through the firewall::

	$ sudo ufw allow samba



Step 4: Configure Samba client
==============================

To be able to access Samba share directory from another machine, we need to install Samba client. I am going install Samba client on Elementary OS::

	sudo apt-get install samba-client cifs-utils

To access Samba share temporarily, run this command::

	$ smbclient //sambaserver-ip/share-dir -U sambauser

For example in my case::

	$ smbclient //192.168.100.77/user1 -U user1

Mount the Samba share to a directory for permanent access::

	$ sudo mkdir -p /mounts/shares
	$ sudo mount -t cifs -o username=user1 //192.168.100.77/user1 ~/mounts/shares

Check if the directory is mounted on the client::

	$ df -h

Output should be as shown:

[Image here: samba-file-sharing-example.png]

To enable persistent mount even on reboot, mount the samba share in fstab file::

	$ sudo vim /etc/fstab

Add the following line depending on your mount point::

	//192.168.100.77/user1  /mnt/shares cifs credentials=/.sambacreds 0 0

Save the file and exit the create the credentials file::

	$ sudo vim /.sambacreds

Add the credentials information::

	username: user1
	password: yourpassword
	domain: WORKGROUP

Confirm if mounted::

	$ sudo mkdir -p /mnt/shares 
	$ sudo mount -a 
	$ df -hT | grep cifs
	//192.168.100.77/user1 cifs      20G  14G  6.3G  69% /mnt/shares

You have successfully set up Samba file share on Linux Mint 20 and mount the shared directory on a client.


***************
Grub-Customizer
***************

Dual-boot systems use GRUB to allow booting to one OS or another. Grub-customizer by `Daniel Richter <https://launchpad.net/~danielrichter2007/+archive/ubuntu/grub-customizer>`_ is quite nice but somehow doesn't fully work for me... it is missing a step::

    sudo update-grub

needed for the picture to actually take.



******************
Command Line Tools
******************

Updating PATH
=============

In Ubuntu, edit /etc/environment. Its sole purpose is to store Environment Variables. Originally the $PATH variable is defined here. This is a paste from my /etc/environment file::

    PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games"

So you can just open up this file as root and add whatever you want.

For immediate results, Run (try as normal user and root)::

    source /etc/environment && export PATH
    

Being able to edit your $PATH is an important skill for any beginning POSIX user, whether you use Linux, BSD, or macOS.

When you type a command into the command prompt in Linux, or in other Linux-like operating systems, all you're doing is telling it to run a program. Even simple commands, like ls, mkdir, rm, and others are just small programs that usually live inside a directory on your computer called /usr/bin. There are other places on your system that commonly hold executable programs as well; some common ones include /usr/local/bin, /usr/local/sbin, and /usr/sbin. Which programs live where, and why, is beyond the scope of this article, but know that an executable program can live practically anywhere on your computer: it doesn't have to be limited to one of these directories.

When you type a command into your Linux shell, it doesn't look in every directory to see if there's a program by that name. It only looks to the ones you specify. How does it know to look in the directories mentioned above? It's simple: They are a part of an environment variable, called $PATH, which your shell checks in order to know where to look.


View your PATH
==============

Sometimes, you may wish to install programs into other locations on your computer, but be able to execute them easily without specifying their exact location. You can do this easily by adding a directory to your $PATH. To see what's in your $PATH right now, type this into a terminal::

    echo $PATH

You'll probably see the directories mentioned above, as well as perhaps some others, and they are all separated by colons. Now let's add another directory to the list.


Set your PATH
=============

Let's say you wrote a little shell script called hello.sh and have it located in a directory called /place/with/the/file. This script provides some useful function to all of the files in your current directory, that you'd like to be able to execute no matter what directory you're in.

Simply add /place/with/the/file to the $PATH variable with the following command::

    export PATH=$PATH:/place/with/the/file

You should now be able to execute the script anywhere on your system by just typing in its name, without having to include the full path as you type it.


Set your PATH permanently
=========================

But what happens if you restart your computer or create a new terminal instance? Your addition to the path is gone! This is by design. The variable $PATH is set by your shell every time it launches, but you can set it so that it always includes your new path with every new shell you open. The exact way to do this depends on which shell you're running.

Not sure which shell you're running? If you're using pretty much any common Linux distribution, and haven't changed the defaults, chances are you're running Bash. But you can confirm this with a simple command::

    echo $0

That's the "echo" command followed by a dollar sign ($) and a zero. $0 represents the zeroth segment of a command (in the command echo $0, the word "echo" therefore maps to $1), or in other words, the thing running your command. Usually this is the Bash shell, although there are others, including Dash, Zsh, Tcsh, Ksh, and Fish.

For Bash, you simply need to add the line from above, export PATH=$PATH:/place/with/the/file, to the appropriate file that will be read when your shell launches. There are a few different places where you could conceivably set the variable name: potentially in a file called ~/.bash_profile, ~/.bashrc, or ~/.profile. The difference between these files is (primarily) when they get read by the shell. If you're not sure where to put it, ~/.bashrc is a good choice.

For other shells, you'll want to find the appropriate place to set a configuration at start time; ksh configuration is typically found in ~/.kshrc, zsh uses ~/.zshrc. Check your shell's documentation to find what file it uses.

This is a simple answer, and there are more quirks and details worth learning. Like most everything in Linux, there is more than one way to do things, and you may find other answers which better meet the needs of your situation or the peculiarities of your Linux distribution. Happy hacking, and good luck, wherever your $PATH may take you.

This article was originally published in June 2017 and has been updated with additional information by the editor.

On the Mac, press [Shift][Cmd][.] to view hiiden files, then in the home folder find .bash_profile file. Open, and you should see this::

    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    export PATH="/usr/local/opt/sphinx-doc/bin:$PATH"
    export PATH="/usr/local/Cellar/python@3.9/3.9.2_1/Frameworks/Python.framework/Versions/3.9/bin:$PATH"
    export PATH=$PATH:/Library/Frameworks/Python.framework/Versions/3.9/bin



***********
Clear Cache
***********

Type this exactly - dangerous command!::

    sudo rm /var/lib/apt/lists/* -vf
    sudo apt-get update


****************
Removing Spotify
****************

From `StackExchange <https://askubuntu.com/questions/491476/how-to-uninstall-spotify>`_, use this command to uninstall Spotify. The culprit is the spotify-client::

    sudo apt-get purge spotify-client

.. image:: ../images/Flou02.png
    :align: center
    :width: 273px



****************
Kivy and PyCharm
****************

Kivy Virtual Environment Installation using PyCharm

Assumption

Assuming virtualenv or/and virtualenvwrapper already installed::

    sudo pip install virtualenv virtualenvwrapper

Launch PyCharm. Then:

    * Click File
    * Click Settings
    * Click project Interpreter
    * Click cogwheel next to the Project Interpreter field, and choose Add...
    * New environment is the default selection.
    * Type kivyinstall for the Location e.g. /home/iam/.virtualenvs/kivyinstall
    * Select Base interpreter (Python 3.5, or Python 2.7) from the drop down
    * Do not select the Inherit global site-packages check-box.
    * Select the Make available to all projects check-box, if needed.
    * Click OK

After pip and setuptools have been installed:

    * click + beside the column heading, Latest.
    * Type cython in the search text input box under Available Packages Dialog.
    * Select Specify version check-box to load version 0.25.2 which is compatible to Kivy version 1.10.0
    * Click Install Package button.
    * After cython 0.25.2 version installed successfully, type kivy in the search text input box under Available Packages Dialog.
    * Click Install Package

After kivy installed successfully, create a new project.
Opened a new project. If kivyinstall did not appear in the expanded External Libraries:

    * click File » Settings... » Project Interpreter
    * select Python...(kivyinstall) e.g. Python 3.5 (kivyinstall)




.. image:: ../images/flou02.png
    :align: center
    :width: 273px




*************************
Brackets in Mint (Ubuntu)
*************************

Since PyCharm and Kivy currently (18.12.27) has issues, going to have a go with Brackets, which works a treat on the Mac. The following installation pointers came from `It's FOSS <https://itsfoss.com/install-brackets-ubuntu/>`_.


Method 1: Install Brackets using Snap
=====================================

To install Snap, enter the following in Terminal::

    sudo apt-get install snapd
    
Starting Ubuntu 16.04, Brackets is available as a Snap app. You can also find it in the Software Center and install it from there in a few clicks for Ubuntu 16.04 and higher versions.

If you want to install via the command line, you can use the Snap commands to install Brackets. This will work for all the Linux distributions that support Snap packaging. First, make sure you have snapd daemon installed on your system. Use the command below::

    snap --version

Once you have made sure that snapd is installed on your Linux system, install Brackets with::

    sudo snap install brackets

In mint, an error occurred with the above command:

    This revision of snap "brackets" was published using classic confinement and thus may perform arbitrary system changes outside of the security sandbox that snaps are usually confined to, which may put your system at risk

This can be rectified by adding --classic::

    sudo snap install brackets --classic


Method 2: Install Brackets using PPA 
====================================
... **in Ubuntu and Linux Mint** (*Not recommended*)

Note: *This method is redundant now. When Brackets was not officially available, the unofficial PPA provided an easy way to install Brackets on Ubuntu.*

Open a terminal and use the following commands to install Brackets via the unofficial PPA::

    sudo add-apt-repository ppa:webupd8team/brackets
    sudo apt-get update
    sudo apt-get install brackets


Method 3: Install Brackets using DEB package
============================================
... **or source code** 

If you do not like PPAs, you can get the .deb installation files from the link below. You will also get the source code of the latest version here:

`Download Brackets Editor <https://github.com/adobe/brackets/releases>`_

These .deb binaries can be installed by double-clicking on it. It will be opened in Ubuntu Software Center by default. You can use a lighter alternative Gdebi as well.


Suggested reads
===============

`How To Install Visual Studio Code On Ubuntu <https://itsfoss.com/install-visual-studio-code-ubuntu/>`_

